var PRM_TITULO_SISTEMA = "GNProject"; function fc_GetQueryStringValue(e) { return unescape(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + escape(e).replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1")) } function fc_GetParentQueryStringValue(e) { return "" != document.referrer ? unescape(document.referrer.replace(new RegExp("^(?:.*[&\\?]" + escape(e).replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1")) : "" } function fc_ExistDisplayControl(e) { return 0 <= e.indexOf("#") && (e = e.replace("#", "")), !(null == document.getElementById(e) || !$("#" + e).is(":visible")) } function fc_ValidarEmail(e) { return expr = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/, !!expr.test(e) } function fc_SoloLetras() { var e = window.event ? event.keyCode : event.which; return 32 == e || 65 <= e && e <= 90 || 97 <= e && e <= 122 || 209 == e || 241 == e || (event.keyCode = 0, alert("Solo se permite ingresar letras"), !1) } function fc_SoloNumeros(e) { var t; return window.event ? t = e.keyCode : e.which && (t = e.which), 13 == t || (!(t < 48 || 57 < t) || (e.keyCode = 0, alert("Solo se permite ingresar números"), !1)) } function fc_ValidarFecha(e) { var t, r, o, n = e, i = 0, a = n.substr(6, 4) + "" + n.substr(3, 2) + n.substr(0, 2); if ("" == a.trim()) return !1; for (var l = 0; l < a.length; l++) if (-1 == "1234567890".indexOf(a.charAt(l))) return !1; if (t = n.substr(6, 4).trim(), r = n.substr(3, 2).trim(), o = n.substr(0, 2).trim(), 1 == r || 3 == r || 5 == r || 7 == r || 8 == r || 10 == r || 12 == r) (isNaN(o) || parseInt(o, 10) < 1 || 31 < parseInt(o, 10)) && (i = 1); else if (4 == r || 6 == r || 9 == r || 11 == r) (isNaN(o) || parseInt(o, 10) < 1 || 30 < parseInt(o, 10)) && (i = 1); else { var s = t % 4 != 0 || t % 100 == 0 && t % 400 != 0 ? 28 : 29; (isNaN(o) || parseInt(o, 10) < 1 || parseInt(o, 10) > s) && (i = 1) } return 1 != i && (!(12 < parseFloat(r)) && !(parseFloat(t) < 1900 || 2100 < parseFloat(t))) } function fc_ValidarRangofechas(e, t) { var r = e.substr(6, 4) + "" + e.substr(3, 2) + e.substr(0, 2); return !(t.substr(6, 4) + "" + t.substr(3, 2) + t.substr(0, 2) < r) } function fc_ClearGridView(e, t) { null != document.getElementById(e) && (1 == t ? $("#" + e).remove() : $("#" + e + " tr:not(:first-child)").remove()) } var DatePicker_Opciones_Default = { fl_changeMonth: !1, fl_changeYear: !1, minDate: "", maxDate: "", fl_enabled_textbox: !0 }; function fc_FormatFecha(e, t, r, o) { e.indexOf("#") < 0 && (e = "#" + e), $.datepicker.regional.es = { closeText: "Cerrar", prevText: "Previo", nextText: "Próximo", currentText: "Hoy", monthNames: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"], monthNamesShort: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"], monthStatus: "Ver otro mes", yearStatus: "Ver otro año", dayNames: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"], dayNamesShort: ["Dom", "Lun", "Mar", "Mie", "Jue", "Vie", "Sáb"], dayNamesMin: ["Do", "Lu", "Ma", "Mi", "Ju", "Vi", "Sa"], dateFormat: "dd/mm/yy", firstDay: 0, initStatus: "Selecciona la fecha", isRTL: !1 }, $.datepicker.setDefaults($.datepicker.regional.es); var n = e; $(n).width(80), $(n).attr("maxlength", "10"), 0 == DatePicker_Opciones_Default.fl_enabled_textbox && $(n).prop("disabled", !0), $(n).datepicker({ showButtonPanel: !0, showOn: "button", buttonImage: "../img/calendario.gif", buttonImageOnly: !0, buttonText: "Click para mostrar el Calendario", changeMonth: t.fl_changeMonth, changeYear: t.fl_changeYear, minDate: t.minDate, maxDate: t.maxDate, onClose: function (e) { "" != r && null != r && null != r && $("#" + o).datepicker("option", "MIN" == r ? "minDate" : "maxDate", e) } }) } function fc_FormatNumeros(e) { e.indexOf("#") < 0 && (e = "#" + e), $(e).keypress(function (e) { return fc_SoloNumeros(e) }) } var chr_miles = ",", chr_decimales = ".", mascara_importe = "999,999,999.99", mstrFormatoIncorrecto = " no tiene el formato correcto.\n"; function fc_FormatImporte(e) { var t = e.replace("#", ""), r = document.getElementById(t); e.indexOf("#") < 0 && (e = "#" + e), $(e).keypress(function (e) { return fc_KeyPressTxtImporte(e, r, mascara_importe) }), $(e).bind("paste", function () { return !1 }), $(e).focus(function (e) { return fc_OnFocusTxtImporte(e, r, mascara_importe) }), $(e).blur(function (e) { return fc_OnBlurTxtImporte(e, r, mascara_importe) }) } function fc_KeyPressTxtImporte(e, t, r) { var o, n = (r = fc_Replace(r, chr_miles, "")).split(chr_decimales); if (o = "." == chr_decimales ? 46 : 44, null == e && (e = window.event), null != e) { var i = 0; if (35 == (i = e.which ? e.which : e.keyCode) || 36 == i || 37 == i || 38 == i || 39 == i || 40 == i || i == o || 45 == i || 9 == i || 8 == i) return !0; if (t.value.length >= r.length) return !1; if (i != o && (i < 48 || 57 < i)) return !1; if (i == o && (1 < n.length && -1 < t.value.indexOf(chr_decimales) || n.length <= 1)) return !1 } return !0 } function fc_OnFocusTxtImporte(e, t, r) { return t.value = fc_Replace(t.value, chr_miles, ""), !0 } function fc_OnBlurTxtImporte(e, t, r) { var o; o = "." == chr_decimales ? /^[\- \d ,.]+$/i : /^[\- \d .,]+$/i; if (t.value = fc_Replace(t.value, chr_miles, ""), "" != fc_Trim(t.value)) { var n = r.split(chr_decimales); if (1 < n.length) { if (!fc_Trim(t.value).match(o)) return alert("El valor ingresado" + mstrFormatoIncorrecto + "El formato correcto es: " + r), t.value = "", t.focus(), !1 } else if (!fc_Trim(t.value).match(/^\d+$/i)) return alert("El valor ingresado" + mstrFormatoIncorrecto + "El formato correcto es: " + r), t.value = "", t.focus(), !1; var i = ""; 1 < n.length ? (isNaN(t.value.replace(",", ".")) && (t.value = 0), t.value = roundNumber(t.value, n[1].length)) : isNaN(t.value.replace(",", ".")) && (t.value = 0), t.value = t.value, arrTextBox = t.value.split(chr_decimales); for (var a = arrTextBox[0].split(""), l = a.length - 1; 0 <= l; l--) i += a[l], a.length - l != 0 && 0 != l && (a.length - l) % 3 == 0 && (i += chr_miles); a = i.split(""), i = ""; for (l = a.length - 1; 0 <= l; l--) i += a[l]; 1 < arrTextBox.length && (i = i + chr_decimales + arrTextBox[1]), t.value = i } } function roundNumber(e, t) { var r; if ((t = Number(t)) < 1) r = Math.round(e).toString(); else { var o = e.toString(); -1 == o.lastIndexOf(chr_decimales) && (o += chr_decimales); var n = o.lastIndexOf(chr_decimales) + t, i = Number(o.substring(n, n + 1)); if (5 <= Number(o.substring(n + 1, n + 2))) { if (9 == i && 0 < n) for (; 0 < n && (9 == i || isNaN(i));) i != chr_decimales ? (n -= 1, i = Number(o.substring(n, n + 1))) : n -= 1; i += 1 } r = o.substring(0, n) + i.toString() } -1 == r.lastIndexOf(chr_decimales) && (r += chr_decimales); for (var a = r.substring(r.lastIndexOf(chr_decimales) + 1).length, l = 0; l < t - a; l++) r += "0"; return r } var JQGrid_Opciones_Default = { pageSize: 10, height: "auto", fl_paginar: !0, fl_paginar_scroll: !1, fl_multiselect: !1, altRows: !1 }, JQGrid_Util = new Object; function fc_GetJQGrid_LocalGrouping(e, t, r, o, n, i, a, l, s, c) { try { var d = e.replace("#", ""); null != document.getElementById("gbox_" + d) && $(e).jqGrid("GridUnload"), e.indexOf("#") < 0 && (e = "#" + e), t.indexOf("#") < 0 && (t = "#" + t), 0 == n.fl_paginar && (n.pageSize = i.length); var u = i, f = $(e); numberTemplate = { formatter: "number", align: "right", sorttype: "number" }, f.jqGrid({ datatype: "local", data: u, colNames: r, colModel: o, pager: t, rownumbers: !0, loadtext: "Cargando datos...", loadonce: !0, viewrecords: !0, recordtext: "{0} - {1} de {2} registros", emptyrecords: "No existen resultados", pgtext: "Pág: {0} de {1}", rowNum: n.pageSize, height: n.height, scroll: n.fl_paginar_scroll, pgbuttons: n.fl_paginar, pginput: n.fl_paginar, multiboxonly: !0, multiselect: n.fl_multiselect, sortname: 0, sortorder: "asc", autowidth: !0, shrinkToFit: !1, forceFit: !0, gridview: !0, altRows: n.altRows, hoverrows: !n.altRows, grouping: !0, groupingView: { groupField: [a], groupColumnShow: [!1], groupText: ["<b>{0} - {1} registro(s)</b>"] }, gridComplete: function () { "" != c && null != c && c() }, onSelectRow: function (e) { "" != l && null != l && l(e) }, ondblClickRow: function (e) { "" != s && null != s && s(e) }, onSortCol: function (e, t, r) { }, onPaging: function (e) { } }) } catch (e) { alert("CATCH: " + e) } } function fc_GetJQGrid_Local(e, t, r, o, n, i, a, l, s) { try { var c = e.replace("#", ""); null != document.getElementById("gbox_" + c) && $(e).jqGrid("GridUnload"), e.indexOf("#") < 0 && (e = "#" + e), t.indexOf("#") < 0 && (t = "#" + t), 0 == n.fl_paginar && (n.pageSize = i.length); var d = i, u = $(e); numberTemplate = { formatter: "number", align: "right", sorttype: "number" }, u.jqGrid({ datatype: "local", data: d, colNames: r, colModel: o, pager: t, rownumbers: !0, loadtext: "Cargando datos...", loadonce: !0, viewrecords: !0, recordtext: "{0} - {1} de {2} registros", emptyrecords: "No existen resultados", pgtext: "Pág: {0} de {1}", rowNum: n.pageSize, height: n.height, scroll: n.fl_paginar_scroll, pgbuttons: n.fl_paginar, pginput: n.fl_paginar, multiboxonly: !0, multiselect: n.fl_multiselect, sortname: 0, sortorder: "asc", autowidth: !0, shrinkToFit: !1, forceFit: !0, gridview: !0, altRows: n.altRows, hoverrows: !n.altRows, gridComplete: function () { "" != s && null != s && s() }, onSelectRow: function (e) { "" != a && null != a && a(e) }, ondblClickRow: function (e) { "" != l && null != l && l(e) }, onSortCol: function (e, t, r) { }, onPaging: function (e) { } }) } catch (e) { alert("CATCH: " + e) } } function fc_GetJQGrid_Ajax(e, t, r, o, n, i, a, l, s, c) { var d = r.replace("#", ""); null != document.getElementById("gbox_" + d) && $(r).jqGrid("GridUnload"), r.indexOf("#") < 0 && (r = "#" + r), o.indexOf("#") < 0 && (o = "#" + o), 0 == a.fl_paginar && (a.pageSize = 1e4), $(r).jqGrid({ datatype: function () { $.ajax({ type: "POST", data: "{'strFiltros':" + JSON.stringify(e) + ",'pPageSize':'" + $(r).getGridParam("rowNum") + "','pCurrentPage':'" + $(r).getGridParam("page") + "','pSortColumn':'" + $(r).getGridParam("sortname") + "','pSortOrder':'" + $(r).getGridParam("sortorder") + "'}", dataType: "json", url: t, contentType: "application/json; charset=utf-8", async: !0, beforeSend: function () { fc_show_progress(!0) }, complete: function () { fc_show_progress(!1) }, success: function (e, t) { "success" == t ? $(r)[0].addJSONData(JSON.parse(e.d)) : alert(JSON.parse(e.responseText).Message) }, error: function (e, t, r) { fc_errorAjax(e, t, r) } }) }, jsonReader: { root: "Items", page: "CurrentPage", total: "PageCount", records: "RecordCount", repeatitems: !0, cell: "Row", id: "ID" }, colNames: n, colModel: i, pager: o, rownumbers: !0, loadtext: "Cargando datos...", viewrecords: !0, recordtext: "{0} - {1} de {2} registros", emptyrecords: "No existen resultados", pgtext: "Pág: {0} de {1}", rowNum: a.pageSize, height: a.height, scroll: a.fl_paginar_scroll, pgbuttons: a.fl_paginar, pginput: a.fl_paginar, multiboxonly: !0, multiselect: a.fl_multiselect, sortname: 0, sortorder: "asc", autowidth: !0, shrinkToFit: !1, forceFit: !0, gridview: !0, altRows: a.altRows, hoverrows: !a.altRows, gridComplete: function () { "" != c && null != c && c() }, onSelectRow: function (e) { "" != l && null != l && l(e) }, ondblClickRow: function (e) { "" != s && null != s && s(e) } }).navGrid(o, { edit: !1, add: !1, search: !1, del: !1, refresh: !1 }) } JQGrid_Util.GetTabla_LocalGrouping = function (e, t, r, o, n, i, a, l, s, c) { fc_GetJQGrid_LocalGrouping(e, t, r, o, n, i, a, l, s, c) }, JQGrid_Util.GetTabla_Local = function (e, t, r, o, n, i, a, l, s) { fc_GetJQGrid_Local(e, t, r, o, n, i, a, l, s) }, JQGrid_Util.GetTabla_Ajax = function (e, t, r, o, n, i, a, l, s, c) { fc_GetJQGrid_Ajax(e, t, r, o, n, i, a, l, s, c) }, JQGrid_Util.getIDs = function (e) { return e.indexOf("#") < 0 && (e = "#" + e), $(e).jqGrid("getDataIDs") }, JQGrid_Util.getRowData = function (e, t) { return e.indexOf("#") < 0 && (e = "#" + e), $(e).getRowData(t) }, JQGrid_Util.getRowDataSelected = function (e) { e.indexOf("#") < 0 && (e = "#" + e); var t = $(e).jqGrid("getGridParam", "selrow"); return $(e).getRowData(t) }, JQGrid_Util.getRowIDSelected = function (e) { return e.indexOf("#") < 0 && (e = "#" + e), $(e).jqGrid("getGridParam", "selrow") }, JQGrid_Util.getRowIDsSelected = function (e) { return e.indexOf("#") < 0 && (e = "#" + e), $(e).jqGrid("getGridParam", "selarrrow") }, JQGrid_Util.getCountRegistros = function (e) { return e.indexOf("#") < 0 && (e = "#" + e), $(e).jqGrid("getGridParam", "records") }, JQGrid_Util.resetSelection = function (e) { e.indexOf("#") < 0 && (e = "#" + e), $(e).resetSelection() }, JQGrid_Util.clearData = function (e) { e.indexOf("#") < 0 && (e = "#" + e), $(e).clearGridData(!0) }, JQGrid_Util.AutoWidthResponsive = function (e) { e.indexOf("#") < 0 && (e = "#" + e), $(window).resize(function () { gridParentWidth = $("#gbox_" + e.replace("#", "")).parent().width(), $(e).jqGrid("setGridWidth", gridParentWidth) }) }; var Modal_Util = new Object; function fc_Modal(e, t, r) { e.indexOf("#") < 0 && (e = "#" + e), $(function () { $(e).dialog({ autoOpen: !1, modal: t, title: PRM_TITULO_SISTEMA, width: "auto", height: "auto", close: function () { r() }, open: function () { } }) }) } function fc_Alert(e) { $("body").append("<div id='dialog-message'></div>"), e = "<div style='margin-top: 10px;'><span class='ui-icon ui-icon-info' style='float: left;'></span><p>" + (e = e.replace(/\n/g, "<br>")) + "</p></div>", $("#dialog-message").html(e), $("#dialog-message").dialog({ resizable: !1, modal: !0, title: PRM_TITULO_SISTEMA, closeOnEscape: !1, buttons: { Aceptar: function () { $(this).dialog("close").remove() } }, open: function (e, t) { $(this).parent().children().children(".ui-dialog-titlebar-close").hide(), $(".ui-dialog :button").blur() } }) } function fc_Confirm(e, t) { $("body").append("<div id='dialog-confirm'></div>"), e = "<div style='margin-top: 10px;'><span class='ui-icon ui-icon-alert' style='float: left;'></span><p>" + (e = e.replace(/\n/g, "<br>")) + "</p></div>", $("#dialog-confirm").html(e), $("#dialog-confirm").dialog({ resizable: !1, modal: !0, title: PRM_TITULO_SISTEMA, closeOnEscape: !1, buttons: { Aceptar: function () { $(this).dialog("close").remove(), t(!0) }, Cancelar: function () { $(this).dialog("close").remove(), t(!1) } }, open: function (e, t) { $(this).parent().children().children(".ui-dialog-titlebar-close").hide(), $(".ui-dialog :button").blur() } }) } function fc_Hide_Check_All(e) { var t = $(e); $("#cb_" + t[0].id).hide() } function fc_CrearTreeView(e, t, r, o, i) { $("#" + e).jstree("destroy"), $(function () { $("#" + e).jstree({ plugins: ["", t], core: { multiple: r, data: o } }).on("changed.jstree", function (e, t) { var r, o, n = []; for (r = 0, o = t.selected.length; r < o; r++) n.push(t.instance.get_node(t.selected[r]).id); i(n.join(", ")) }).jstree() }) } function fc_FillCombo(r, e, t) { r.indexOf("#") < 0 && (r = "#" + r), $(r).html(""), 0 == e.length ? $(r).append("<option value=''>--Ninguno--</option>") : "" != t && $(r).append("<option value=''>" + t + "</option>"), $.each(e, function (e, t) { $(r).append("<option value='" + t.value + "'>" + t.nombre + "</option>") }) } function fc_CallService(e, t, r) { fc_show_progress(!0), $.ajax({ type: "POST", data: e, dataType: "json", url: t, contentType: "application/json; charset=utf-8", async: !0, beforeSend: function () { }, complete: function () { fc_show_progress(!1) }, success: function (e, t) { "success" == t ? r(JSON.parse(e.d)) : alert("ERROR SUCCESS: " + JSON.parse(jsondata.responseText).Message) }, error: function (e, t, r) { fc_errorAjax(e, t, r) } }) } function fc_errorAjax(e, t, r) { if (401 == e.status) alert("Acceso no Autorizado: " + r), location.reload(); else if (0 == e.status) fc_Alert("Error de conexión con el sistema.\nVerificar red y volver a intertarlo."); else { var o = e.responseText.indexOf("<title>") + 7, n = e.responseText.indexOf("</title>") - o, i = e.responseText.substr(o, n); if ("" == i) try { i = jQuery.parseJSON(e.responseText).Message } catch (e) { } alert("Error: (" + e.status + "): " + i) } } function fc_show_progress(e) { e ? $("#divProgress").show() : $("#divProgress").hide() } function fc_PressKey(e, t) { event.keyCode == e && document.getElementById(t).click() } function fc_formatFileSize(e) { return "number" != typeof e ? "" : 1073741824 <= e ? (e / 1073741824).toFixed(2) + " GB" : 1048576 <= e ? (e / 1048576).toFixed(2) + " MB" : (e / 1024).toFixed(2) + " KB" } Modal_Util.Open = function (e) { e.indexOf("#") < 0 && (e = "#" + e), $(e).dialog("open") }, Modal_Util.Close = function (e) { e.indexOf("#") < 0 && (e = "#" + e), $(e).dialog("close") }, Modal_Util.FormatModal = function (e, t, r) { fc_Modal(e, t, r) }, Modal_Util.Alert = function (e) { fc_Alert(e) }; var JQFileUpload_Opciones_Default = { maxNumberOfFiles: 1, autoUpload: !(Modal_Util.Confirm = function (e, t) { fc_Confirm(e, t) }), maxFileSize: 5242880, acceptFileTypes: void 0, paramJson: {} }, JQFileUpload_Util = new Object; function fc_FormatFileUpload(p, e, t) { try { p.indexOf("#") < 0 && (p = "#" + p); var m = "cont_" + p.replace("#", ""); $(p).after("<div id=" + m + "></div>"), m = "#" + m, e.paramJson.maxFileSize = e.maxFileSize, e.paramJson.acceptFileTypes = e.acceptFileTypes, $(p).fileupload({ url: "../HandlerFileUpload/FileTransferHandler.ashx", autoUpload: e.autoUpload, dataType: "json", maxNumberOfFiles: e.maxNumberOfFiles, nu_files: 0, nu_files_pendiente_proceso: 0, maxFileSize: e.maxFileSize, acceptFileTypes: e.acceptFileTypes, formData: e.paramJson, add: function (e, r) { var t = $(this).fileupload("option"), o = t.nu_files + 1; if (100 < r.files[0].name.length) alert("El nombre del archivo no debe exceder los 100 caracteres."); else if (!(o > t.maxNumberOfFiles)) { if (null != t.acceptFileTypes) { var n = "(.|/)(" + t.acceptFileTypes + ")$", i = new RegExp(n, "i"); if (!i.test(r.files[0].type) && !i.test(r.files[0].name)) return void alert("Tipo de archivo no permitido (Permitidos: [" + t.acceptFileTypes + "]).") } var a = "jpg|jpeg|png|gif|pdf|doc|docx|xls|xlsx|ppt|pptx|txt"; a = "(.|/)(" + a + ")$"; var l = new RegExp(a, "i"); if (l.test(r.files[0].type) || l.test(r.files[0].name)) if (t.maxFileSize && r.files[0].size > t.maxFileSize) alert("El archivo es demasiado grande. (Peso máximo: " + fc_formatFileSize(t.maxFileSize) + ")"); else { $(this).fileupload("option", "nu_files", o); var s = t.nu_files_pendiente_proceso + 1; $(this).fileupload("option", "nu_files_pendiente_proceso", s), o >= t.maxNumberOfFiles && $(p).hide(); var c = $("<img src=../img/progress_snake.gif style='display:none;'></img>"), d = ""; 0 == t.autoUpload && (d = $('<button type="button" class="start">Subir</button>').button({ icons: { primary: "ui-icon-circle-arrow-e" }, text: !1 }).click(function () { r.submit(), $(this).hide(), r.context.find("img").show() })); var u = $('<button type="button" class="cancel">Cancelar</button>').button({ icons: { primary: "ui-icon-cancel" }, text: !1 }).click(function () { var e = $(p).fileupload("option", "nu_files"); e -= 1, $(p).fileupload("option", "nu_files", e); var t = $(p).fileupload("option", "nu_files_pendiente_proceso"); t -= 1, $(p).fileupload("option", "nu_files_pendiente_proceso", t), r.abort(), r.context.fadeOut(function () { $(this).remove(), $(p).show() }) }), f = $("<label>" + r.files[0].name + "</label><a></a> <label>" + fc_formatFileSize(r.files[0].size) + "</label>"); r.context = $("<div/>"), r.context.append(f).append(c).append(d).append(u).append("<div id='line_progress' style='width:0%;background-color:#005cab;height:1px;'></div>").appendTo(m), 1 == t.autoUpload && (r.submit(), r.context.find("img").show()) } else alert("Tipo de archivo no permitido por el sistema.") } }, progress: function (e, t) { var r = parseInt(t.loaded / t.total * 100, 10); t.context.find("#line_progress").css("width", r + "%") }, fail: function (e, t) { t.jqXHR && alert("Server-error:\n\n" + t.jqXHR.responseText) }, done: function (e, i) { $.each(i.result, function (e, t) { var r = $(p).fileupload("option", "nu_files_pendiente_proceso"); if (r -= 1, $(p).fileupload("option", "nu_files_pendiente_proceso", r), null != t.error && "" != t.error) { alert(t.error); var o = $(p).fileupload("option", "nu_files"); o -= 1, $(p).fileupload("option", "nu_files", o), i.context.fadeOut(function () { $(this).remove(), $(p).show() }) } else { i.context.find("#line_progress").css("width", "100%"); var n = $('<button type="button" class="delete">Eliminar</button>').button({ icons: { primary: "ui-icon-trash" }, text: !1 }).attr("data-type", t.delete_type).attr("data-url", t.delete_url).click(function () { $.ajax({ dataType: "json", url: $(this).attr("data-url"), type: "POST", data: { "data-type": $(this).attr("data-type") }, complete: function () { var e = $(p).fileupload("option", "nu_files"); e -= 1, $(p).fileupload("option", "nu_files", e), i.context.fadeOut(function () { $(this).remove(), $(p).show() }) } }) }); i.context.find("img").fadeOut(function () { i.context.find("#line_progress").remove(), i.context.find("label").first().hide(), i.context.find("a").text(t.name).attr("href", t.url).attr("target", "_blank"), i.context.find("button.cancel").hide(), i.context.append(n) }) } }) } }) } catch (e) { alert("CATCH: " + e) } } function fc_GetNomFilesContentFileUpload(e) { e.indexOf("#") < 0 && (e = "#" + e); var t = "cont_" + e.replace("#", ""); t = "#" + t; var r = "", o = ""; return $(t).find("a").each(function (e) { 0 < e && (o = "|"), r += o + $(this).text() }), r } function fc_CleanFileUpload(e) { e.indexOf("#") < 0 && (e = "#" + e); var t = "cont_" + e.replace("#", ""); t = "#" + t, $(t).empty(), $(e).show(), $(e).fileupload("option", "nu_files", 0), $(e).fileupload("option", "nu_files_pendiente_proceso", 0) } function fc_GetNumFilesPendienteProceso(e) { return e.indexOf("#") < 0 && (e = "#" + e), $(e).fileupload("option", "nu_files_pendiente_proceso") } function fc_UploadFile(e, t, r, o) { if (-1 == navigator.appName.indexOf("Explorer") || -1 != navigator.appVersion.indexOf("MSIE 1")) { for (var n = document.getElementById(e).files, i = new Array(".gif", ".jpg", ".png", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".txt", ".pdf"), a = document.getElementById(e).value, l = a.substring(a.lastIndexOf(".")).toLowerCase(), s = !1, c = 0; c < i.length; c++) if (i[c] == l) { s = !0; break } if (!s) return alert("Comprueba la extensión de los archivos a subir. \n  Sólo se pueden subir archivos con extensiones: " + i.join() + "\n"), !1; var d = 0; s = !1; for (c = 0; c < n.length; c++) if (r < (d = n[c].size / 1024)) { s = !0; break } if (d = parseInt(d), s) return alert("El tamaño del archivo no puede ser mayor a " + r.toString() + " KB"), !1; fc_show_progress(!0); try { for (c = 0; c < n.length; c++) { "0"; var u = new XMLHttpRequest, f = new FormData; f.append("file", n[c]), f.append("name", ""), f.append("ruta", t), u.open("POST", "../FileUpload.ashx/ProcessRequest", !0), u.onload = function (e) { if (200 == this.status) { var t = this.responseText.split("|"); o(t, d), fc_show_progress(!1) } else alert(e) }, u.send(f), 1 } document.getElementById(e).value = null } catch (e) { alert(e) } } else alert("- Debe usar Internet Explorer superior a 9 o otro navegador.") } function fc_Trim(e) { var t, r = e; for (t = 0; t < r.length && " " == r.charAt(t);) r = r.substring(t + 1, r.length); for (t = r.length - 1; 0 <= t && " " == r.charAt(t); t = r.length - 1) r = r.substring(0, t); return r } function fc_Replace(e, t, r) { return e.split(t).join(r) } function fc_OpenReport(e, t, r) { var o = "750"; "1" == r && (o = "1050"); var n = "../Reportes/FrmPrint.aspx?cod=" + e + "&prm=" + t; window.open(n, "_blank", "status=1,toolbar=no,menubar=no,location=no,scrollbars=1,resizable=1,width=" + o + ",height=600") } function fc_OpenReportExcel(e, t, r) { var o = "750"; "1" == r && (o = "1050"); var n = "../Reportes/FrmPrint.aspx?cod=" + e + "&fl_print_EXCEL=1&prm=" + t; window.open(n, "_blank", "status=1,toolbar=no,menubar=no,location=no,scrollbars=1,resizable=1,width=" + o + ",height=600") } JQFileUpload_Util.FormatFileUpload = function (e, t, r) { fc_FormatFileUpload(e, IdPieTabla, Cabecera, ModelCol, t, objDatos, fn_Click, fn_dblClick, r) }, JQFileUpload_Util.getNomFilesContentFileUpload = function (e) { return fc_GetNomFilesContentFileUpload(e) }, JQFileUpload_Util.cleanFileUpload = function (e) { fc_CleanFileUpload(e) }, JQFileUpload_Util.getNumFilesPendienteProceso = function (e) { return fc_GetNumFilesPendienteProceso(e) };